import { Typography, Palette } from "styling.slint";
import { ScrollView } from "scrollview.slint";

export struct HighlightedToken {
    text: string,
    x: int,
    y: int,
}

export component TextEditImproved {
    callback edited(string);

    in property <TextHorizontalAlignment> horizontal-alignment <=> i-text-input.horizontal-alignment;
    in property <bool> read-only <=> i-text-input.read-only;
    in property <bool> enabled <=> i-text-input.enabled;
    property <bool> has-focus: i-text-input.has-focus;
    property <length> visible-width <=> i-scroll-view.visible-width;
    property <length> visible-height <=> i-scroll-view.visible-height;
    in-out property <string> text <=> i-text-input.text;
    property <length> viewport-x <=> i-scroll-view.viewport-x;
    property <length> viewport-y <=> i-scroll-view.viewport-y;
    property <length> viewport-width <=> i-scroll-view.viewport-width;
    property <length> viewport-height <=> i-scroll-view.viewport-height;

    in property <[HighlightedToken]> highlight_tokens: [];

    forward-focus: i-text-input;
    horizontal-stretch: 1;
    vertical-stretch: 1;

    i-background := Rectangle {
        width: 100%;
        height: 100%;
        border-radius: 4px;
        background: Palette.control-default;
        border-width: 1px;
        border-color: Palette.text-control-border;

        i-scroll-view := ScrollView {
            x: 12px;
            y: 12px;
            width: parent.width - 24px;
            height: parent.height - 24px;
            viewport-width: max(self.visible-width, i-text-input.preferred-width);
            viewport-height: max(self.visible-height, i-text-input.preferred-height);

            FocusScope {
                forward-focus: i-text-input;

                // key-pressed(event) => {
                //     if (event.text == "z" && event.modifiers.control) {
                //         if (event.modifiers.shift) {
                //             debug("REDO");
                //         } else {
                //             debug("undo");
                //         }
                //     }
                //     accept
                // }

                i-text-input := TextInput {
                    enabled: true;
                    color: #555;
                    font-size: 16px;
                    font-weight: Typography.body.font-weight;
                    selection-background-color: #E9E8F2;
                    selection-foreground-color: self.color;
                    single-line: false;
                    wrap: no-wrap;

                    edited => {
                        root.edited(self.text);
                    }

                    cursor-position-changed(cpos) => {
                        if (cpos.x + root.viewport-x < 12px) {
                            root.viewport-x = min(0px, max(root.visible-width - self.width,  - cpos.x + 12px ));
                        } else if (cpos.x + root.viewport-x > root.visible-width - 12px) {
                            root.viewport-x = min(0px, max(root.visible-width - self.width,  root.visible-width - cpos.x - 12px ));
                        }
                        if (cpos.y + root.viewport-y < 12px) {
                            root.viewport-y = min(0px, max(root.visible-height - self.height,  - cpos.y + 12px ));
                        } else if (cpos.y + root.viewport-y > root.visible-height - 12px - 20px) {
                            // FIXME: font-height hardcoded to 20px
                            root.viewport-y = min(0px, max(root.visible-height - self.height,  root.visible-height - cpos.y - 12px - 20px));
                        }
                    }
                }
            }

            for token[i] in highlight_tokens : Text {
                x: token.x * 9.848px;
                y: token.y * 19.51px;
                font-size: 16px;
                font-weight: 600;
                text: token.text;
                color: #3021E5;
            }
        }
    }

    public function select-all() {
        i-text-input.select-all();
    }

    public function clear-selection() {
        i-text-input.clear-selection();
    }

    public function cut() {
        i-text-input.cut();
    }

    public function copy() {
        i-text-input.copy();
    }

    public function paste() {
        i-text-input.paste();
    }

    states [
        disabled when !root.enabled : {
            i-background.background: Palette.control-disabled;
            i-background.border-color: Palette.control-stroke;
            i-text-input.color: Palette.text-disabled;
        }
        focused when root.has-focus : {
            i-background.background: Palette.control-input-active;
            i-background.border-color: Palette.control-stroke;
        }
    ]
}